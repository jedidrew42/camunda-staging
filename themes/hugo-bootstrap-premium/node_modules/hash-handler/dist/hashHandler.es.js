import queryString from 'query-string';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/* eslint no-param-reassign:0 */
// $FlowFixMe
/** hash-handler: Simple hash manipulation
 * @name hash-handler
 * @returns {hash}
 */
function hashHandler() {
  var handlers = [];

  // set window hash
  var setLocationHash = function setLocationHash(newHash) {
    var hashVal = newHash;
    if ((typeof hashVal === 'undefined' ? 'undefined' : _typeof(hashVal)) === 'object') {
      // sort by keys
      hashVal = Object.keys(hashVal).sort().reduce(function (r, k) {
        // $FlowFixMe
        r[k] = hashVal[k];
        return r;
      }, {});

      // stringify object
      hashVal = queryString.stringify(hashVal);
    }

    location.hash = String(hashVal);
  };

  // get window hash and parse it
  var getParsedHash = function getParsedHash() {
    return queryString.parse(location.hash);
  };

  // hashchange event handler
  var handleHashchange = function handleHashchange() {
    var parsedHash = getParsedHash();
    handlers.forEach(function (handle) {
      handle(parsedHash);
    });
  };

  // add listener
  window.addEventListener('hashchange', handleHashchange);

  return {
    /**
     * Get current hash.
     *
     * @param {String} key     Hash query string key
     * @return {Object|String} Hash object or single value
     */
    get: function get() {
      // return parsed hash
      return getParsedHash();
    },


    /**
     * Extend current hash with object values.
     *
     * @param {Object} newHash
     */
    set: function set(newHash) {
      // merge with existing hash
      var parsedHash = getParsedHash();
      setLocationHash(Object.assign(parsedHash, newHash));
    },


    /**
     * Replace current hash.
     *
     * @param {Object} newHash
     */
    replace: function replace(newHash) {
      setLocationHash(newHash);
    },


    /**
     * Clear hash.
     */
    clear: function clear() {
      // clear hash, # will also remain
      setLocationHash('');
    },


    /**
     * Register hashchange event handler.
     *
     * @param {Function} handler
     */
    registerListener: function registerListener(handler) {
      // register handler and handlers it
      handlers.push(handler);
    },


    /**
     * Remove hashchange event handler.
     *
     * @param {Function} handler
     */
    removeListener: function removeListener(handler) {
      var index = handlers.indexOf(handler);
      if (index !== -1) {
        // remove handler from handlers
        handlers.splice(index, 1);
      }
    },


    /**
     * Remove all event listeners.
     */
    destroy: function destroy() {
      // remove event listener
      window.removeEventListener('hashchange', handleHashchange);
      // clear handler handlers
      handlers.length = 0;
    }
  };
}

export default hashHandler;
//# sourceMappingURL=hashHandler.es.js.map
